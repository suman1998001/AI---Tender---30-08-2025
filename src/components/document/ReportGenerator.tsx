import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "@/hooks/use-toast";
import { 
  FileText, 
  Download, 
  BarChart3, 
  PieChart, 
  TrendingUp,
  Calendar,
  Filter,
  Sparkles,
  Eye
} from "lucide-react";

interface ReportGeneratorProps {
  onGenerateReport?: () => void;
}

export const ReportGenerator = ({ onGenerateReport }: ReportGeneratorProps) => {
  const [selectedReportType, setSelectedReportType] = useState('');
  const [selectedDocuments, setSelectedDocuments] = useState<string[]>([]);
  const [reportName, setReportName] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedReport, setGeneratedReport] = useState<string>('');
  const [showPreview, setShowPreview] = useState(false);

  const reportTypes = [
    { value: 'compliance', label: 'Compliance Analysis Report', icon: FileText },
    { value: 'financial', label: 'Financial Summary Report', icon: TrendingUp },
    { value: 'technical', label: 'Technical Evaluation Report', icon: BarChart3 },
    { value: 'comparison', label: 'Applicant Comparison Report', icon: PieChart },
    { value: 'risk', label: 'Risk Assessment Report', icon: Filter },
    { value: 'custom', label: 'Custom Analytics Report', icon: Sparkles }
  ];

  const availableDocuments = [
    { id: 'doc1', name: 'Technical Specifications.pdf', type: 'Technical', size: '2.4 MB' },
    { id: 'doc2', name: 'Financial Proposal.pdf', type: 'Financial', size: '1.8 MB' },
    { id: 'doc3', name: 'Compliance Certificate.pdf', type: 'Compliance', size: '0.9 MB' },
    { id: 'doc4', name: 'Company Profile.pdf', type: 'General', size: '3.2 MB' },
    { id: 'doc5', name: 'References.pdf', type: 'References', size: '1.1 MB' }
  ];

  const handleGenerateReport = () => {
    setIsGenerating(true);
    setShowPreview(false);
    setGeneratedReport('');
    
    if (onGenerateReport) {
      onGenerateReport();
    }
    
    setTimeout(() => {
      setIsGenerating(false);
      const reportType = reportTypes.find(t => t.value === selectedReportType);
      const mockReport = `${reportType?.label || 'AI Report'}

Generated on: ${new Date().toLocaleDateString()}
Report Name: ${reportName}

EXECUTIVE SUMMARY
================
This ${reportType?.label.toLowerCase()} has been automatically generated using AI analysis of ${selectedDocuments.length} selected documents. The analysis covers key metrics, compliance indicators, and strategic insights.

KEY FINDINGS
============
• Document Processing: ${selectedDocuments.length} documents analyzed successfully
• Compliance Status: 85% compliance rate identified
• Risk Assessment: Medium risk level with 3 areas requiring attention
• Financial Impact: Estimated cost savings of 15-20%

DETAILED ANALYSIS
================
1. Document Quality Assessment
   - All required documents present and properly formatted
   - Technical specifications meet industry standards
   - Financial projections align with market expectations

2. Compliance Evaluation
   - Regulatory requirements: 90% compliance
   - Industry standards: 80% compliance
   - Internal policies: 95% compliance

3. Risk Factors Identified
   - Timeline constraints: Medium risk
   - Resource allocation: Low risk
   - Technical implementation: Medium risk

RECOMMENDATIONS
===============
1. Address compliance gaps in areas identified
2. Implement additional quality controls
3. Consider phased implementation approach
4. Regular monitoring and review cycles

APPENDICES
==========
A. Document Analysis Details
B. Compliance Matrix
C. Risk Assessment Framework
D. Statistical Analysis

---
Report generated by AI Document Analysis System
Confidential and Proprietary`;

      setGeneratedReport(mockReport);
      setShowPreview(true);
      
      toast({
        title: "Report Generated Successfully!",
        description: `${reportType?.label} has been generated and is ready for preview`,
        className: "fixed bottom-4 right-4 bg-white border border-gray-200 text-gray-900 shadow-lg"
      });
    }, 3000);
  };

  const handleDocumentToggle = (docId: string) => {
    setSelectedDocuments(prev => 
      prev.includes(docId) 
        ? prev.filter(id => id !== docId)
        : [...prev, docId]
    );
  };

  const handleDownloadReport = () => {
    toast({
      title: "Download Started",
      description: "Report is being downloaded as PDF",
      className: "fixed bottom-4 right-4 bg-white border border-gray-200 text-gray-900 shadow-lg"
    });
  };

  const handlePreviewReport = (reportName: string) => {
    toast({
      title: "Opening Report Preview",
      description: `Loading preview for ${reportName}`,
      className: "fixed bottom-4 right-4 bg-white border border-gray-200 text-gray-900 shadow-lg"
    });
  };

  return (
    <div className="space-y-[15px]">
      {/* Loading Overlay */}
      {isGenerating && (
        <div className="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-white rounded-[15px] p-8 text-center shadow-2xl max-w-md mx-4">
            <div className="animate-spin rounded-full h-16 w-16 border-4 border-cyan-500 border-t-transparent mx-auto mb-6"></div>
            <div className="flex items-center justify-center gap-2 text-cyan-600 mb-2">
              <Sparkles className="animate-pulse" size={20} />
              <span className="font-semibold text-lg">AI Processing</span>
            </div>
            <p className="text-gray-600 mb-4">Generating comprehensive report...</p>
            <div className="flex justify-center">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-cyan-500 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-cyan-500 rounded-full animate-bounce" style={{
                  animationDelay: '0.1s'
                }}></div>
                <div className="w-2 h-2 bg-cyan-500 rounded-full animate-bounce" style={{
                  animationDelay: '0.2s'
                }}></div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Main Content - AI Generator and Preview Side by Side */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-[15px]">
        {/* AI Report Generator */}
        <Card className="border-cyan-200 rounded-[15px]">
          <CardHeader className="rounded-t-[15px]">
            <CardTitle className="flex items-center gap-2 text-cyan-900">
              <Sparkles size={20} />
              AI Report Generator
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4 rounded-b-[15px]">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Report Type
              </label>
              <Select value={selectedReportType} onValueChange={setSelectedReportType}>
                <SelectTrigger className="rounded-[15px]">
                  <SelectValue placeholder="Select report type" />
                </SelectTrigger>
                <SelectContent className="rounded-[15px]">
                  {reportTypes.map((type) => (
                    <SelectItem key={type.value} value={type.value}>
                      <div className="flex items-center gap-2">
                        <type.icon size={16} />
                        {type.label}
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Report Name
              </label>
              <Textarea
                placeholder="Enter report name..."
                value={reportName}
                onChange={(e) => setReportName(e.target.value)}
                className="min-h-[60px] rounded-[15px]"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Select Documents for Analysis
              </label>
              <div className="space-y-2 max-h-48 overflow-y-auto scrollable-container">
                {availableDocuments.map((doc) => (
                  <div key={doc.id} className="flex items-center space-x-3 p-2 border rounded-[15px] hover:bg-gray-50">
                    <Checkbox
                      checked={selectedDocuments.includes(doc.id)}
                      onCheckedChange={() => handleDocumentToggle(doc.id)}
                    />
                    <div className="flex-1">
                      <div className="font-medium text-sm">{doc.name}</div>
                      <div className="text-xs text-gray-500">{doc.type} • {doc.size}</div>
                    </div>
                    <Badge variant="outline" className="text-xs rounded-[15px]">
                      {doc.type}
                    </Badge>
                  </div>
                ))}
              </div>
            </div>

            <Button 
              onClick={handleGenerateReport}
              disabled={!selectedReportType || selectedDocuments.length === 0 || !reportName.trim() || isGenerating}
              className="w-full bg-cyan-600 hover:bg-cyan-700 rounded-[15px]"
            >
              {isGenerating ? (
                <>
                  <div className="animate-spin mr-2 h-4 w-4 border-2 border-white border-t-transparent rounded-full" />
                  Generating Report...
                </>
              ) : (
                <>
                  <FileText size={16} className="mr-2" />
                  Generate AI Report
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        {/* Report Preview */}
        <Card className="border-green-200 rounded-[15px]">
          <CardHeader className="rounded-t-[15px]">
            <CardTitle className="flex items-center gap-2 text-green-900">
              <Eye size={20} />
              Report Preview
            </CardTitle>
          </CardHeader>
          <CardContent className="rounded-b-[15px]">
            {showPreview && generatedReport ? (
              <div className="space-y-4">
                <div className="bg-gray-50 p-4 rounded-[15px] max-h-96 overflow-y-auto scrollable-container">
                  <pre className="text-sm whitespace-pre-wrap text-gray-800 font-mono">
                    {generatedReport}
                  </pre>
                </div>
                <Button 
                  onClick={handleDownloadReport}
                  className="w-full bg-green-600 hover:bg-green-700 rounded-[15px]"
                >
                  <Download size={16} className="mr-2" />
                  Download Report
                </Button>
              </div>
            ) : (
              <div className="text-center p-8 border-2 border-dashed border-gray-300 rounded-[15px]">
                <FileText size={48} className="mx-auto mb-4 text-gray-400" />
                <p className="text-gray-600 mb-2">Report Preview</p>
                <p className="text-sm text-gray-500">
                  Generate a report to see the preview here
                </p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Recent Reports */}
      <Card className="rounded-[15px]">
        <CardHeader className="rounded-t-[15px]">
          <CardTitle className="text-gray-900">Recent Reports</CardTitle>
        </CardHeader>
        <CardContent className="rounded-b-[15px]">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {[
              { name: 'Compliance Analysis Q1', date: '2024-01-15', status: 'Ready' },
              { name: 'Financial Summary', date: '2024-01-12', status: 'Processing' },
              { name: 'Technical Evaluation', date: '2024-01-08', status: 'Ready' }
            ].map((report, index) => (
              <div key={index} className="flex items-center justify-between p-3 border rounded-[15px] hover:bg-gray-50">
                <div>
                  <div className="font-medium text-sm">{report.name}</div>
                  <div className="text-xs text-gray-500">{report.date}</div>
                </div>
                <div className="flex items-center gap-2">
                  <Badge variant={report.status === 'Ready' ? 'default' : 'secondary'} className="rounded-[15px]">
                    {report.status}
                  </Badge>
                  {report.status === 'Ready' && (
                    <Button 
                      size="sm" 
                      variant="ghost" 
                      onClick={() => handlePreviewReport(report.name)}
                      className="rounded-[15px]"
                    >
                      <Download size={14} />
                    </Button>
                  )}
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};
